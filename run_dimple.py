import os
import subprocess
import argparse
import glob

parser = argparse.ArgumentParser(description='Runs DIMPLE for a series of datasets and finds blobs of unmodelled electron density')

parser._action_groups.pop()
run_dimple = parser.add_argument_group('Arguments which are required to run DIMPLE')
optional = parser.add_argument_group('Optional arguments')

run_dimple.add_argument('--run',
					action='store_true',dest='run',
					help='Runs DIMPLE')

run_dimple.add_argument('--pdb',
					type=str, dest='pdb',
					help='PDB file')

run_dimple.add_argument('--ds_path',
					type=str, dest='ds_path',
					help='Path to the dataset directory containing the mtz files. A map file will tell which specific directories to read')

run_dimple.add_argument('--ds_map',
					type=str, dest='map_file',
					help='A file containing the dataset map. It tells which pucks and positions DIMPLE should consider. It must have the format "puck position" with one entry per line.')

optional.add_argument('-b','--blobs',
					action='store_true',dest='blobs',
					help='Detects blobs')


args = parser.parse_args()

print(args.pdb)


# prot = HsDHODH, lig = A1057
#datasets = [('2929', '1'),
#		('2929', '2')	no crystal?
#		('2929', '3'),
#		('2929', '4'),
#		('2929', '5')	empty loop
#		('2929', '6'),
#		('2929', '7'),
#		('2930','15'),
#		('2930','16')
#		]

# prot = HsDHODH, lig = ML390
datasets = [('2930','6'),
		('2930','10'),
		('2930','11'),
		('2930','12')
#		('2930','13'),
#		('2930','14')
		]

#print(data)

#for a in data:
#	puck=a[0]
#	pos=a[1]
#	
#	print('Puck ', puck, 'position ', pos)

#os.listdir('/media/lcp/LCP_RP_SOLEIL/2018-12-17_SOLEIL_PX1/USP/puck2929/pos7/')
#[mtz for mtz in os.listdir('/media/lcp/LCP_RP_SOLEIL/2018-12-17_SOLEIL_PX1/USP/puck2929/pos7/') if mtz.split('.')[-1]=='h5']

#mtz_files=['pos7_1.mtz','pos7_1_if.mtz']
processes = []

if( args.run == True ):
	devnull=open(os.devnull,'w')
	
	print("starting")
	for dataset in datasets:
		
		puck     = dataset[0]
		position = dataset[1]
		
		path_mtz='/media/lcp/LCP_RP_SOLEIL/2018-12-17_SOLEIL_PX1/USP/puck'+puck+'/pos'+position+'/xdsme_*/ccp4/'
		
		mtz = glob.glob(path_mtz+'/*.mtz')[0]
		
		p = subprocess.Popen(['dimple',mtz,'5k9c_ok.pdb','out_puck'+puck+'_pos'+position+'/'] , stdout=devnull, stderr=devnull)
		processes.append(p)

	print("running")
	for p in processes:
		p.wait()

	print(processes)
	print("done")
	
	devnull.close()

if( args.blobs == True ):
	blobs=[]
	remove_words=['grid','points','score','#','(',')','',',']

	def getkey(item):
		return float(item[2])

	for dataset in datasets:
		
		puck     = dataset[0]
		position = dataset[1]
		
		path='out_puck'+puck+'_pos'+position+'/'
		
		logfile=path+'09-find-blobs.log'
		
		with open(logfile,'r') as log:
			lines = log.readlines()
			for line in lines:
				if(line[0]=='#'):
					words = [word for word in line.strip().replace('#','# ').replace(')',' )').replace(',',' , ').split(' ') if word not in remove_words]
					
					words.append(puck)
					words.append(position)
					blobs.append(words)
					
#				blob_id          = words[0]
#				blob_grid_points = words[1]
#				blob_score       = words[2]
#				blob_x           = words[3]
#				blob_y           = words[4]
#				blob_z           = words[5]
#				blob_puck        = words[6]
#				blob_position    = words[7]


	blobs.sort(key=getkey,reverse=True)
	
	with open('blobs.dat','w') as all_blobs:
		all_blobs.write('ID\tgrd_pts\tscore\tx\ty\tz\tpuck\tpos\n')
		for blob in blobs:
			all_blobs.write(blob[0]+'\t'+blob[1]+'\t'+blob[2]+'\t'+blob[3]+'\t'+blob[4]+'\t'+blob[5]+'\t'+blob[6]+'\t'+blob[7]+'\n')

	for n in range(0,11):
		print(n,blobs[n])
		
		with open('visualize_blob_'+str(n+1)+'.py','w') as script:
			script.write('#!/usr/bin/env coot\n')
			script.write('# python script for coot - generated by dimple\n')
			script.write('set_nomenclature_errors_on_read("ignore")\n')
			script.write('molecule = read_pdb("out_puck'+blobs[n][6]+'_pos'+blobs[n][7]+'/final.pdb")\n')
			script.write('set_rotation_centre('+blobs[n][3]+', '+blobs[n][4]+', '+blobs[n][5]+')\n')
			script.write('set_zoom(30.)\n')
			script.write('set_view_quaternion(-0.587795, 0.34301, 0, 0.732695)\n')
			script.write('mtz = "out_puck'+blobs[n][6]+'_pos'+blobs[n][7]+'/final.mtz"\n')
			script.write('map21 = make_and_draw_map(mtz, "FWT", "PHWT", "", 0, 0)\n')
			script.write('map11 = make_and_draw_map(mtz, "DELFWT", "PHDELWT", "", 0, 1)\n')
